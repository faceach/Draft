function getChatsRecords(itemLenth) {

	var records = {
		'users': [{
			'id': 1,
			'self': 1,
			'name': 'Vince',
			'avator': 'img/1.jpg'
		}, {
			'id': 2,
			'self': 0,
			'name': 'Balabala',
			'avator': 'img/2.jpg'
		}],
		'totalNum': 2000,
		'currentNum': 100,
		'remainNum': 1900,
		'chats': [{
			'm': '软件质量管理不经理,要达到怎样的能力呢',
			'e': '10:19:23',
			't': 1,
			'u': 0,
		}, {
			'm': '我个人认为，要掌握一定的开发知识，然后掌握丰富的软件测试知识，然后对软件工程有一定的了解，当然组织和协调能力那是抽象的不好说',
			'e': '10:19:24',
			't': 1,
			'u': 1,
		}, {
			'm': '我只知道写好的用例是质量经理必须要做的事情.',
			'e': '10:19:39',
			't': 1,
			'u': 0,
		}, {
			'm': '写好的用例是测试工程师必须做到的事情',
			'e': '10:20:32',
			't': 1,
			'u': 1,
		}, {
			'm': 'img/a.jpg',
			'e': '10:20:36',
			'p': 1,
			'u': 1,
		}, {
			'm': '质量经理应该是更要吧!要不怎么控制质量啊?',
			'e': '10:20:48',
			't': 1,
			'u': 0,
		}, {
			'm': '这还用说吗',
			'e': '10:26:23',
			't': 1,
			'u': 1,
		}, {
			'm': '学习者,能指导下吗,我现在的测试工作一直是一个人在摸索中,我正在为怎样在测试前写好测试用例考虑着,也没见过比较规范的好的测试用例,能对一个最简单的主要是对数据库增删改查的管理的系统怎么规划怎么设计TEST CASE给个建议吗?写用例有没有度的问题啊?',
			'e': '10:28:31',
			't': 1,
			'u': 0,
		}, {
			'm': '首先如果你想把增删改这样的测试做好，你必须有去后台数据库中查询数据的能力。增删改的用例很好写的，一些涉及到因增删改之后有异动的业务逻辑流可能将是你必须关注的地方，这就要看需求分析或详细设计中的具体内容了。',
			'e': '10:30:45',
			't': 1,
			'u': 1,
		}, {
			'm': '一个很简单的例子，比如删除一个部门，用例很简单，就是核对此部门是否删除掉，在前后台都可验证，保险的方式是去后台验证，因为有的JS缓存会有假像，如果JS没处理好或刷新不及时，但部门被删除后涉及主外键关系的部门底下的员工怎么办，前提是此部门底下没有员工了，那这个判断将是你用例中的重点',
			'e': '10:32:43',
			't': 1,
			'u': 0,
		}, {
			'm': '需求提到某角色对某些数据进行修改或者删除或者只可以查看的. 那么就是说删除部门就一个TEST CASE 就可以了',
			'e': '10:34:08',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累',
			'e': '10:35:31',
			't': 1,
			'u': 0,
		}, {
			'm': '我感觉不够,似乎要好多个用例能请问下 ,比如你们对删除部门这样一个操作动作,而部门设计到的主要是用户,用户关系到角色,角色关系到对系统的操作权限,这样大概要设计几个用例.',
			'e': '10:37:30',
			't': 1,
			'u': 1,
		}, {
			'm': '你可以一个CASE 然后底下有多个步聚',
			'e': '10:37:48',
			't': 1,
			'u': 0,
		}, {
			'm': '还比如，增和改其大部份是相同的，那你可以用例共享',
			'e': '10:38:05',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累，我想这就是度的问题,也就是这个度让我迟迟不知道该怎么写好用例',
			'e': '10:39:20',
			't': 1,
			'u': 0,
		}, {
			'm': '多混些日子就可以了，这只是接触过与没经历过的差别，没多大技术性，建议你多学开发知识，这对测试非常有用',
			'e': '10:39:34',
			't': 1,
			'u': 1,
		}, {
			'm': '我用BUGFREE2.0可以直接COPY ,修改,写起来倒是方便',
			'e': '10:39:58',
			't': 1,
			'u': 0,
		}, {
			'm': '你要用TD或别的一些，COPY都不用',
			'e': '10:44:37',
			't': 1,
			'u': 1,
		}, {
			'm': '那么就说对增删改的用例也就是可以多个步骤写在一起,就比如我对一个文本框的输入用例,可以简单写成一个用例,分步骤为:1.正常值输入2.边界值输入3.特殊字符输入 4......这样的?',
			'e': '10:45:03',
			't': 1,
			'u': 0,
		}, {
			'm': 'img/b.jpg',
			'e': '10:45:25',
			'p': 1,
			'u': 0,
		}, {
			'm': '就是这样的，你太有才了',
			'e': '10:46:04',
			't': 1,
			'u': 1,
		}, {
			'm': '当然，仁者见仁，每个人的习惯和公司对用例的要求不一样',
			'e': '10:46:12',
			't': 1,
			'u': 1,
		}, {
			'm': '终于让我明白了!谢谢!是你耐心指导啊!',
			'e': '10:46:54',
			't': 1,
			'u': 0,
		}, {
			'm': '怎么说,我想知道,一些规范的公司,比如经过CMMI认证的公司他们用例写的是一样呢,还是有区别?',
			'e': '10:47:08',
			't': 1,
			'u': 0,
		}, {
			'm': '应该说是用例设计',
			'e': '10:47:26',
			't': 1,
			'u': 1,
		}, {
			'm': '和这个没有关系的，大多会和公司系统的性质有关系，产品化和项目化的要求会有不太一样的地方',
			'e': '10:48:24',
			't': 1,
			'u': 0,
		}, {
			'm': '还有包括产品版本升级的频率，变更的频率，和产品所涉及的技术强度等都会决定你什么模块的用例要到什么程度',
			'e': '10:50:48',
			't': 1,
			'u': 1,
		}, {
			'm': '那么如果按刚才说的这样写,我要写的这个项目"基础数据管理系统"(就AMDR)的用例那不是很少,就只有两方向了:把权限问题搞定和保证AMD数据正常就可以了',
			'e': '10:51:46',
			't': 1,
			'u': 0,
		}, {
			'm': '我也要写产品的用例,那么产品的用例该怎么写呢',
			'e': '10:51:51',
			't': 1,
			'u': 1,
		}, {
			'm': '这样我替你分析不了的，要从整个项目出发来把握',
			'e': '10:52:24',
			't': 1,
			'u': 1,
		}, {
			'm': '理论上产品的用例要求会对项目化的用例高点。',
			'e': '10:53:54',
			't': 1,
			'u': 0,
		}, {
			'm': '是否写得要不能偷懒些,写得详细些',
			'e': '10:54:15',
			't': 1,
			'u': 1,
		}, {
			'm': '产品化的项目，用例的延续性和复用性更高。',
			'e': '10:54:42',
			't': 1,
			'u': 1,
		}, {
			'm': '这个要根据你公司具体情况来定的',
			'e': '10:54:55',
			't': 1,
			'u': 0,
		}, {
			'm': '哦,也就是你说要考虑到升级的问题',
			'e': '10:56:13',
			't': 1,
			'u': 1,
		}, {
			'm': '先考虑到了,测试用例复用性高也就能省事,但是延续性和复用性有区别吗?是指可以对某个用例进行补充?',
			'e': '10:56:40',
			't': 1,
			'u': 0,
		}, {
			'm': '延续性=?接口',
			'e': '10:57:03',
			't': 1,
			'u': 1,
		}, {
			'm': '改天我们面谈一下，这样会累死的',
			'e': '10:57:56',
			't': 1,
			'u': 1,
		}, {
			'm': '软件质量管理不经理,要达到怎样的能力呢',
			'e': '10:19:23',
			't': 1,
			'u': 0,
		}, {
			'm': '我个人认为，要掌握一定的开发知识，然后掌握丰富的软件测试知识，然后对软件工程有一定的了解，当然组织和协调能力那是抽象的不好说',
			'e': '10:19:24',
			't': 1,
			'u': 1,
		}, {
			'm': '我只知道写好的用例是质量经理必须要做的事情.',
			'e': '10:19:39',
			't': 1,
			'u': 0,
		}, {
			'm': '写好的用例是测试工程师必须做到的事情',
			'e': '10:20:32',
			't': 1,
			'u': 1,
		}, {
			'm': 'img/a.jpg',
			'e': '10:20:36',
			'p': 1,
			'u': 1,
		}, {
			'm': '质量经理应该是更要吧!要不怎么控制质量啊?',
			'e': '10:20:48',
			't': 1,
			'u': 0,
		}, {
			'm': '这还用说吗',
			'e': '10:26:23',
			't': 1,
			'u': 1,
		}, {
			'm': '学习者,能指导下吗,我现在的测试工作一直是一个人在摸索中,我正在为怎样在测试前写好测试用例考虑着,也没见过比较规范的好的测试用例,能对一个最简单的主要是对数据库增删改查的管理的系统怎么规划怎么设计TEST CASE给个建议吗?写用例有没有度的问题啊?',
			'e': '10:28:31',
			't': 1,
			'u': 0,
		}, {
			'm': '首先如果你想把增删改这样的测试做好，你必须有去后台数据库中查询数据的能力。增删改的用例很好写的，一些涉及到因增删改之后有异动的业务逻辑流可能将是你必须关注的地方，这就要看需求分析或详细设计中的具体内容了。',
			'e': '10:30:45',
			't': 1,
			'u': 1,
		}, {
			'm': '一个很简单的例子，比如删除一个部门，用例很简单，就是核对此部门是否删除掉，在前后台都可验证，保险的方式是去后台验证，因为有的JS缓存会有假像，如果JS没处理好或刷新不及时，但部门被删除后涉及主外键关系的部门底下的员工怎么办，前提是此部门底下没有员工了，那这个判断将是你用例中的重点',
			'e': '10:32:43',
			't': 1,
			'u': 0,
		}, {
			'm': '需求提到某角色对某些数据进行修改或者删除或者只可以查看的. 那么就是说删除部门就一个TEST CASE 就可以了',
			'e': '10:34:08',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累',
			'e': '10:35:31',
			't': 1,
			'u': 0,
		}, {
			'm': '我感觉不够,似乎要好多个用例能请问下 ,比如你们对删除部门这样一个操作动作,而部门设计到的主要是用户,用户关系到角色,角色关系到对系统的操作权限,这样大概要设计几个用例.',
			'e': '10:37:30',
			't': 1,
			'u': 1,
		}, {
			'm': '你可以一个CASE 然后底下有多个步聚',
			'e': '10:37:48',
			't': 1,
			'u': 0,
		}, {
			'm': '还比如，增和改其大部份是相同的，那你可以用例共享',
			'e': '10:38:05',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累，我想这就是度的问题,也就是这个度让我迟迟不知道该怎么写好用例',
			'e': '10:39:20',
			't': 1,
			'u': 0,
		}, {
			'm': '多混些日子就可以了，这只是接触过与没经历过的差别，没多大技术性，建议你多学开发知识，这对测试非常有用',
			'e': '10:39:34',
			't': 1,
			'u': 1,
		}, {
			'm': '我用BUGFREE2.0可以直接COPY ,修改,写起来倒是方便',
			'e': '10:39:58',
			't': 1,
			'u': 0,
		}, {
			'm': '你要用TD或别的一些，COPY都不用',
			'e': '10:44:37',
			't': 1,
			'u': 1,
		}, {
			'm': '那么就说对增删改的用例也就是可以多个步骤写在一起,就比如我对一个文本框的输入用例,可以简单写成一个用例,分步骤为:1.正常值输入2.边界值输入3.特殊字符输入 4......这样的?',
			'e': '10:45:03',
			't': 1,
			'u': 0,
		}, {
			'm': 'img/b.jpg',
			'e': '10:45:25',
			'p': 1,
			'u': 0,
		}, {
			'm': '就是这样的，你太有才了',
			'e': '10:46:04',
			't': 1,
			'u': 1,
		}, {
			'm': '当然，仁者见仁，每个人的习惯和公司对用例的要求不一样',
			'e': '10:46:12',
			't': 1,
			'u': 1,
		}, {
			'm': '终于让我明白了!谢谢!是你耐心指导啊!',
			'e': '10:46:54',
			't': 1,
			'u': 0,
		}, {
			'm': '怎么说,我想知道,一些规范的公司,比如经过CMMI认证的公司他们用例写的是一样呢,还是有区别?',
			'e': '10:47:08',
			't': 1,
			'u': 0,
		}, {
			'm': '应该说是用例设计',
			'e': '10:47:26',
			't': 1,
			'u': 1,
		}, {
			'm': '和这个没有关系的，大多会和公司系统的性质有关系，产品化和项目化的要求会有不太一样的地方',
			'e': '10:48:24',
			't': 1,
			'u': 0,
		}, {
			'm': '还有包括产品版本升级的频率，变更的频率，和产品所涉及的技术强度等都会决定你什么模块的用例要到什么程度',
			'e': '10:50:48',
			't': 1,
			'u': 1,
		}, {
			'm': '那么如果按刚才说的这样写,我要写的这个项目"基础数据管理系统"(就AMDR)的用例那不是很少,就只有两方向了:把权限问题搞定和保证AMD数据正常就可以了',
			'e': '10:51:46',
			't': 1,
			'u': 0,
		}, {
			'm': '我也要写产品的用例,那么产品的用例该怎么写呢',
			'e': '10:51:51',
			't': 1,
			'u': 1,
		}, {
			'm': '这样我替你分析不了的，要从整个项目出发来把握',
			'e': '10:52:24',
			't': 1,
			'u': 1,
		}, {
			'm': '理论上产品的用例要求会对项目化的用例高点。',
			'e': '10:53:54',
			't': 1,
			'u': 0,
		}, {
			'm': '是否写得要不能偷懒些,写得详细些',
			'e': '10:54:15',
			't': 1,
			'u': 1,
		}, {
			'm': '产品化的项目，用例的延续性和复用性更高。',
			'e': '10:54:42',
			't': 1,
			'u': 1,
		}, {
			'm': '这个要根据你公司具体情况来定的',
			'e': '10:54:55',
			't': 1,
			'u': 0,
		}, {
			'm': '哦,也就是你说要考虑到升级的问题',
			'e': '10:56:13',
			't': 1,
			'u': 1,
		}, {
			'm': '先考虑到了,测试用例复用性高也就能省事,但是延续性和复用性有区别吗?是指可以对某个用例进行补充?',
			'e': '10:56:40',
			't': 1,
			'u': 0,
		}, {
			'm': '延续性=?接口',
			'e': '10:57:03',
			't': 1,
			'u': 1,
		}, {
			'm': '改天我们面谈一下，这样会累死的',
			'e': '10:57:56',
			't': 1,
			'u': 1,
		}, {
			'm': '软件质量管理不经理,要达到怎样的能力呢',
			'e': '10:19:23',
			't': 1,
			'u': 0,
		}, {
			'm': '我个人认为，要掌握一定的开发知识，然后掌握丰富的软件测试知识，然后对软件工程有一定的了解，当然组织和协调能力那是抽象的不好说',
			'e': '10:19:24',
			't': 1,
			'u': 1,
		}, {
			'm': '我只知道写好的用例是质量经理必须要做的事情.',
			'e': '10:19:39',
			't': 1,
			'u': 0,
		}, {
			'm': '写好的用例是测试工程师必须做到的事情',
			'e': '10:20:32',
			't': 1,
			'u': 1,
		}, {
			'm': 'img/a.jpg',
			'e': '10:20:36',
			'p': 1,
			'u': 1,
		}, {
			'm': '质量经理应该是更要吧!要不怎么控制质量啊?',
			'e': '10:20:48',
			't': 1,
			'u': 0,
		}, {
			'm': '这还用说吗',
			'e': '10:26:23',
			't': 1,
			'u': 1,
		}, {
			'm': '学习者,能指导下吗,我现在的测试工作一直是一个人在摸索中,我正在为怎样在测试前写好测试用例考虑着,也没见过比较规范的好的测试用例,能对一个最简单的主要是对数据库增删改查的管理的系统怎么规划怎么设计TEST CASE给个建议吗?写用例有没有度的问题啊?',
			'e': '10:28:31',
			't': 1,
			'u': 0,
		}, {
			'm': '首先如果你想把增删改这样的测试做好，你必须有去后台数据库中查询数据的能力。增删改的用例很好写的，一些涉及到因增删改之后有异动的业务逻辑流可能将是你必须关注的地方，这就要看需求分析或详细设计中的具体内容了。',
			'e': '10:30:45',
			't': 1,
			'u': 1,
		}, {
			'm': '一个很简单的例子，比如删除一个部门，用例很简单，就是核对此部门是否删除掉，在前后台都可验证，保险的方式是去后台验证，因为有的JS缓存会有假像，如果JS没处理好或刷新不及时，但部门被删除后涉及主外键关系的部门底下的员工怎么办，前提是此部门底下没有员工了，那这个判断将是你用例中的重点',
			'e': '10:32:43',
			't': 1,
			'u': 0,
		}, {
			'm': '需求提到某角色对某些数据进行修改或者删除或者只可以查看的. 那么就是说删除部门就一个TEST CASE 就可以了',
			'e': '10:34:08',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累',
			'e': '10:35:31',
			't': 1,
			'u': 0,
		}, {
			'm': '我感觉不够,似乎要好多个用例能请问下 ,比如你们对删除部门这样一个操作动作,而部门设计到的主要是用户,用户关系到角色,角色关系到对系统的操作权限,这样大概要设计几个用例.',
			'e': '10:37:30',
			't': 1,
			'u': 1,
		}, {
			'm': '你可以一个CASE 然后底下有多个步聚',
			'e': '10:37:48',
			't': 1,
			'u': 0,
		}, {
			'm': '还比如，增和改其大部份是相同的，那你可以用例共享',
			'e': '10:38:05',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累，我想这就是度的问题,也就是这个度让我迟迟不知道该怎么写好用例',
			'e': '10:39:20',
			't': 1,
			'u': 0,
		}, {
			'm': '多混些日子就可以了，这只是接触过与没经历过的差别，没多大技术性，建议你多学开发知识，这对测试非常有用',
			'e': '10:39:34',
			't': 1,
			'u': 1,
		}, {
			'm': '我用BUGFREE2.0可以直接COPY ,修改,写起来倒是方便',
			'e': '10:39:58',
			't': 1,
			'u': 0,
		}, {
			'm': '你要用TD或别的一些，COPY都不用',
			'e': '10:44:37',
			't': 1,
			'u': 1,
		}, {
			'm': '那么就说对增删改的用例也就是可以多个步骤写在一起,就比如我对一个文本框的输入用例,可以简单写成一个用例,分步骤为:1.正常值输入2.边界值输入3.特殊字符输入 4......这样的?',
			'e': '10:45:03',
			't': 1,
			'u': 0,
		}, {
			'm': 'img/b.jpg',
			'e': '10:45:25',
			'p': 1,
			'u': 0,
		}, {
			'm': '就是这样的，你太有才了',
			'e': '10:46:04',
			't': 1,
			'u': 1,
		}, {
			'm': '软件质量管理不经理,要达到怎样的能力呢',
			'e': '10:19:23',
			't': 1,
			'u': 0,
		}, {
			'm': '我个人认为，要掌握一定的开发知识，然后掌握丰富的软件测试知识，然后对软件工程有一定的了解，当然组织和协调能力那是抽象的不好说',
			'e': '10:19:24',
			't': 1,
			'u': 1,
		}, {
			'm': '我只知道写好的用例是质量经理必须要做的事情.',
			'e': '10:19:39',
			't': 1,
			'u': 0,
		}, {
			'm': '写好的用例是测试工程师必须做到的事情',
			'e': '10:20:32',
			't': 1,
			'u': 1,
		}, {
			'm': 'img/a.jpg',
			'e': '10:20:36',
			'p': 1,
			'u': 1,
		}, {
			'm': '质量经理应该是更要吧!要不怎么控制质量啊?',
			'e': '10:20:48',
			't': 1,
			'u': 0,
		}, {
			'm': '这还用说吗',
			'e': '10:26:23',
			't': 1,
			'u': 1,
		}, {
			'm': '学习者,能指导下吗,我现在的测试工作一直是一个人在摸索中,我正在为怎样在测试前写好测试用例考虑着,也没见过比较规范的好的测试用例,能对一个最简单的主要是对数据库增删改查的管理的系统怎么规划怎么设计TEST CASE给个建议吗?写用例有没有度的问题啊?',
			'e': '10:28:31',
			't': 1,
			'u': 0,
		}, {
			'm': '首先如果你想把增删改这样的测试做好，你必须有去后台数据库中查询数据的能力。增删改的用例很好写的，一些涉及到因增删改之后有异动的业务逻辑流可能将是你必须关注的地方，这就要看需求分析或详细设计中的具体内容了。',
			'e': '10:30:45',
			't': 1,
			'u': 1,
		}, {
			'm': '一个很简单的例子，比如删除一个部门，用例很简单，就是核对此部门是否删除掉，在前后台都可验证，保险的方式是去后台验证，因为有的JS缓存会有假像，如果JS没处理好或刷新不及时，但部门被删除后涉及主外键关系的部门底下的员工怎么办，前提是此部门底下没有员工了，那这个判断将是你用例中的重点',
			'e': '10:32:43',
			't': 1,
			'u': 0,
		}, {
			'm': '需求提到某角色对某些数据进行修改或者删除或者只可以查看的. 那么就是说删除部门就一个TEST CASE 就可以了',
			'e': '10:34:08',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累',
			'e': '10:35:31',
			't': 1,
			'u': 0,
		}, {
			'm': '我感觉不够,似乎要好多个用例能请问下 ,比如你们对删除部门这样一个操作动作,而部门设计到的主要是用户,用户关系到角色,角色关系到对系统的操作权限,这样大概要设计几个用例.',
			'e': '10:37:30',
			't': 1,
			'u': 1,
		}, {
			'm': '你可以一个CASE 然后底下有多个步聚',
			'e': '10:37:48',
			't': 1,
			'u': 0,
		}, {
			'm': '还比如，增和改其大部份是相同的，那你可以用例共享',
			'e': '10:38:05',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累，我想这就是度的问题,也就是这个度让我迟迟不知道该怎么写好用例',
			'e': '10:39:20',
			't': 1,
			'u': 0,
		}, {
			'm': '多混些日子就可以了，这只是接触过与没经历过的差别，没多大技术性，建议你多学开发知识，这对测试非常有用',
			'e': '10:39:34',
			't': 1,
			'u': 1,
		}, {
			'm': '我用BUGFREE2.0可以直接COPY ,修改,写起来倒是方便',
			'e': '10:39:58',
			't': 1,
			'u': 0,
		}, {
			'm': '你要用TD或别的一些，COPY都不用',
			'e': '10:44:37',
			't': 1,
			'u': 1,
		}, {
			'm': '那么就说对增删改的用例也就是可以多个步骤写在一起,就比如我对一个文本框的输入用例,可以简单写成一个用例,分步骤为:1.正常值输入2.边界值输入3.特殊字符输入 4......这样的?',
			'e': '10:45:03',
			't': 1,
			'u': 0,
		}, {
			'm': 'img/b.jpg',
			'e': '10:45:25',
			'p': 1,
			'u': 0,
		}, {
			'm': '就是这样的，你太有才了',
			'e': '10:46:04',
			't': 1,
			'u': 1,
		}, {
			'm': '当然，仁者见仁，每个人的习惯和公司对用例的要求不一样',
			'e': '10:46:12',
			't': 1,
			'u': 1,
		}, {
			'm': '终于让我明白了!谢谢!是你耐心指导啊!',
			'e': '10:46:54',
			't': 1,
			'u': 0,
		}, {
			'm': '怎么说,我想知道,一些规范的公司,比如经过CMMI认证的公司他们用例写的是一样呢,还是有区别?',
			'e': '10:47:08',
			't': 1,
			'u': 0,
		}, {
			'm': '应该说是用例设计',
			'e': '10:47:26',
			't': 1,
			'u': 1,
		}, {
			'm': '和这个没有关系的，大多会和公司系统的性质有关系，产品化和项目化的要求会有不太一样的地方',
			'e': '10:48:24',
			't': 1,
			'u': 0,
		}, {
			'm': '还有包括产品版本升级的频率，变更的频率，和产品所涉及的技术强度等都会决定你什么模块的用例要到什么程度',
			'e': '10:50:48',
			't': 1,
			'u': 1,
		}, {
			'm': '那么如果按刚才说的这样写,我要写的这个项目"基础数据管理系统"(就AMDR)的用例那不是很少,就只有两方向了:把权限问题搞定和保证AMD数据正常就可以了',
			'e': '10:51:46',
			't': 1,
			'u': 0,
		}, {
			'm': '我也要写产品的用例,那么产品的用例该怎么写呢',
			'e': '10:51:51',
			't': 1,
			'u': 1,
		}, {
			'm': '这样我替你分析不了的，要从整个项目出发来把握',
			'e': '10:52:24',
			't': 1,
			'u': 1,
		}, {
			'm': '理论上产品的用例要求会对项目化的用例高点。',
			'e': '10:53:54',
			't': 1,
			'u': 0,
		}, {
			'm': '是否写得要不能偷懒些,写得详细些',
			'e': '10:54:15',
			't': 1,
			'u': 1,
		}, {
			'm': '产品化的项目，用例的延续性和复用性更高。',
			'e': '10:54:42',
			't': 1,
			'u': 1,
		}, {
			'm': '这个要根据你公司具体情况来定的',
			'e': '10:54:55',
			't': 1,
			'u': 0,
		}, {
			'm': '哦,也就是你说要考虑到升级的问题',
			'e': '10:56:13',
			't': 1,
			'u': 1,
		}, {
			'm': '先考虑到了,测试用例复用性高也就能省事,但是延续性和复用性有区别吗?是指可以对某个用例进行补充?',
			'e': '10:56:40',
			't': 1,
			'u': 0,
		}, {
			'm': '延续性=?接口',
			'e': '10:57:03',
			't': 1,
			'u': 1,
		}, {
			'm': '改天我们面谈一下，这样会累死的',
			'e': '10:57:56',
			't': 1,
			'u': 1,
		}, {
			'm': '软件质量管理不经理,要达到怎样的能力呢',
			'e': '10:19:23',
			't': 1,
			'u': 0,
		}, {
			'm': '我个人认为，要掌握一定的开发知识，然后掌握丰富的软件测试知识，然后对软件工程有一定的了解，当然组织和协调能力那是抽象的不好说',
			'e': '10:19:24',
			't': 1,
			'u': 1,
		}, {
			'm': '我只知道写好的用例是质量经理必须要做的事情.',
			'e': '10:19:39',
			't': 1,
			'u': 0,
		}, {
			'm': '写好的用例是测试工程师必须做到的事情',
			'e': '10:20:32',
			't': 1,
			'u': 1,
		}, {
			'm': 'img/a.jpg',
			'e': '10:20:36',
			'p': 1,
			'u': 1,
		}, {
			'm': '质量经理应该是更要吧!要不怎么控制质量啊?',
			'e': '10:20:48',
			't': 1,
			'u': 0,
		}, {
			'm': '这还用说吗',
			'e': '10:26:23',
			't': 1,
			'u': 1,
		}, {
			'm': '学习者,能指导下吗,我现在的测试工作一直是一个人在摸索中,我正在为怎样在测试前写好测试用例考虑着,也没见过比较规范的好的测试用例,能对一个最简单的主要是对数据库增删改查的管理的系统怎么规划怎么设计TEST CASE给个建议吗?写用例有没有度的问题啊?',
			'e': '10:28:31',
			't': 1,
			'u': 0,
		}, {
			'm': '首先如果你想把增删改这样的测试做好，你必须有去后台数据库中查询数据的能力。增删改的用例很好写的，一些涉及到因增删改之后有异动的业务逻辑流可能将是你必须关注的地方，这就要看需求分析或详细设计中的具体内容了。',
			'e': '10:30:45',
			't': 1,
			'u': 1,
		}, {
			'm': '一个很简单的例子，比如删除一个部门，用例很简单，就是核对此部门是否删除掉，在前后台都可验证，保险的方式是去后台验证，因为有的JS缓存会有假像，如果JS没处理好或刷新不及时，但部门被删除后涉及主外键关系的部门底下的员工怎么办，前提是此部门底下没有员工了，那这个判断将是你用例中的重点',
			'e': '10:32:43',
			't': 1,
			'u': 0,
		}, {
			'm': '需求提到某角色对某些数据进行修改或者删除或者只可以查看的. 那么就是说删除部门就一个TEST CASE 就可以了',
			'e': '10:34:08',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累',
			'e': '10:35:31',
			't': 1,
			'u': 0,
		}, {
			'm': '我感觉不够,似乎要好多个用例能请问下 ,比如你们对删除部门这样一个操作动作,而部门设计到的主要是用户,用户关系到角色,角色关系到对系统的操作权限,这样大概要设计几个用例.',
			'e': '10:37:30',
			't': 1,
			'u': 1,
		}, {
			'm': '你可以一个CASE 然后底下有多个步聚',
			'e': '10:37:48',
			't': 1,
			'u': 0,
		}, {
			'm': '还比如，增和改其大部份是相同的，那你可以用例共享',
			'e': '10:38:05',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累，我想这就是度的问题,也就是这个度让我迟迟不知道该怎么写好用例',
			'e': '10:39:20',
			't': 1,
			'u': 0,
		}, {
			'm': '多混些日子就可以了，这只是接触过与没经历过的差别，没多大技术性，建议你多学开发知识，这对测试非常有用',
			'e': '10:39:34',
			't': 1,
			'u': 1,
		}, {
			'm': '我用BUGFREE2.0可以直接COPY ,修改,写起来倒是方便',
			'e': '10:39:58',
			't': 1,
			'u': 0,
		}, {
			'm': '你要用TD或别的一些，COPY都不用',
			'e': '10:44:37',
			't': 1,
			'u': 1,
		}, {
			'm': '那么就说对增删改的用例也就是可以多个步骤写在一起,就比如我对一个文本框的输入用例,可以简单写成一个用例,分步骤为:1.正常值输入2.边界值输入3.特殊字符输入 4......这样的?',
			'e': '10:45:03',
			't': 1,
			'u': 0,
		}, {
			'm': 'img/b.jpg',
			'e': '10:45:25',
			'p': 1,
			'u': 0,
		}, {
			'm': '就是这样的，你太有才了',
			'e': '10:46:04',
			't': 1,
			'u': 1,
		}, {
			'm': '当然，仁者见仁，每个人的习惯和公司对用例的要求不一样',
			'e': '10:46:12',
			't': 1,
			'u': 1,
		}, {
			'm': '终于让我明白了!谢谢!是你耐心指导啊!',
			'e': '10:46:54',
			't': 1,
			'u': 0,
		}, {
			'm': '怎么说,我想知道,一些规范的公司,比如经过CMMI认证的公司他们用例写的是一样呢,还是有区别?',
			'e': '10:47:08',
			't': 1,
			'u': 0,
		}, {
			'm': '应该说是用例设计',
			'e': '10:47:26',
			't': 1,
			'u': 1,
		}, {
			'm': '和这个没有关系的，大多会和公司系统的性质有关系，产品化和项目化的要求会有不太一样的地方',
			'e': '10:48:24',
			't': 1,
			'u': 0,
		}, {
			'm': '还有包括产品版本升级的频率，变更的频率，和产品所涉及的技术强度等都会决定你什么模块的用例要到什么程度',
			'e': '10:50:48',
			't': 1,
			'u': 1,
		}, {
			'm': '那么如果按刚才说的这样写,我要写的这个项目"基础数据管理系统"(就AMDR)的用例那不是很少,就只有两方向了:把权限问题搞定和保证AMD数据正常就可以了',
			'e': '10:51:46',
			't': 1,
			'u': 0,
		}, {
			'm': '我也要写产品的用例,那么产品的用例该怎么写呢',
			'e': '10:51:51',
			't': 1,
			'u': 1,
		}, {
			'm': '这样我替你分析不了的，要从整个项目出发来把握',
			'e': '10:52:24',
			't': 1,
			'u': 1,
		}, {
			'm': '理论上产品的用例要求会对项目化的用例高点。',
			'e': '10:53:54',
			't': 1,
			'u': 0,
		}, {
			'm': '是否写得要不能偷懒些,写得详细些',
			'e': '10:54:15',
			't': 1,
			'u': 1,
		}, {
			'm': '产品化的项目，用例的延续性和复用性更高。',
			'e': '10:54:42',
			't': 1,
			'u': 1,
		}, {
			'm': '这个要根据你公司具体情况来定的',
			'e': '10:54:55',
			't': 1,
			'u': 0,
		}, {
			'm': '哦,也就是你说要考虑到升级的问题',
			'e': '10:56:13',
			't': 1,
			'u': 1,
		}, {
			'm': '先考虑到了,测试用例复用性高也就能省事,但是延续性和复用性有区别吗?是指可以对某个用例进行补充?',
			'e': '10:56:40',
			't': 1,
			'u': 0,
		}, {
			'm': '延续性=?接口',
			'e': '10:57:03',
			't': 1,
			'u': 1,
		}, {
			'm': '改天我们面谈一下，这样会累死的',
			'e': '10:57:56',
			't': 1,
			'u': 1,
		}, {
			'm': '软件质量管理不经理,要达到怎样的能力呢',
			'e': '10:19:23',
			't': 1,
			'u': 0,
		}, {
			'm': '我个人认为，要掌握一定的开发知识，然后掌握丰富的软件测试知识，然后对软件工程有一定的了解，当然组织和协调能力那是抽象的不好说',
			'e': '10:19:24',
			't': 1,
			'u': 1,
		}, {
			'm': '我只知道写好的用例是质量经理必须要做的事情.',
			'e': '10:19:39',
			't': 1,
			'u': 0,
		}, {
			'm': '写好的用例是测试工程师必须做到的事情',
			'e': '10:20:32',
			't': 1,
			'u': 1,
		}, {
			'm': 'img/a.jpg',
			'e': '10:20:36',
			'p': 1,
			'u': 1,
		}, {
			'm': '质量经理应该是更要吧!要不怎么控制质量啊?',
			'e': '10:20:48',
			't': 1,
			'u': 0,
		}, {
			'm': '这还用说吗',
			'e': '10:26:23',
			't': 1,
			'u': 1,
		}, {
			'm': '学习者,能指导下吗,我现在的测试工作一直是一个人在摸索中,我正在为怎样在测试前写好测试用例考虑着,也没见过比较规范的好的测试用例,能对一个最简单的主要是对数据库增删改查的管理的系统怎么规划怎么设计TEST CASE给个建议吗?写用例有没有度的问题啊?',
			'e': '10:28:31',
			't': 1,
			'u': 0,
		}, {
			'm': '首先如果你想把增删改这样的测试做好，你必须有去后台数据库中查询数据的能力。增删改的用例很好写的，一些涉及到因增删改之后有异动的业务逻辑流可能将是你必须关注的地方，这就要看需求分析或详细设计中的具体内容了。',
			'e': '10:30:45',
			't': 1,
			'u': 1,
		}, {
			'm': '一个很简单的例子，比如删除一个部门，用例很简单，就是核对此部门是否删除掉，在前后台都可验证，保险的方式是去后台验证，因为有的JS缓存会有假像，如果JS没处理好或刷新不及时，但部门被删除后涉及主外键关系的部门底下的员工怎么办，前提是此部门底下没有员工了，那这个判断将是你用例中的重点',
			'e': '10:32:43',
			't': 1,
			'u': 0,
		}, {
			'm': '需求提到某角色对某些数据进行修改或者删除或者只可以查看的. 那么就是说删除部门就一个TEST CASE 就可以了',
			'e': '10:34:08',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累',
			'e': '10:35:31',
			't': 1,
			'u': 0,
		}, {
			'm': '我感觉不够,似乎要好多个用例能请问下 ,比如你们对删除部门这样一个操作动作,而部门设计到的主要是用户,用户关系到角色,角色关系到对系统的操作权限,这样大概要设计几个用例.',
			'e': '10:37:30',
			't': 1,
			'u': 1,
		}, {
			'm': '你可以一个CASE 然后底下有多个步聚',
			'e': '10:37:48',
			't': 1,
			'u': 0,
		}, {
			'm': '还比如，增和改其大部份是相同的，那你可以用例共享',
			'e': '10:38:05',
			't': 1,
			'u': 1,
		}, {
			'm': '这个具体情况具体分析，建用例的划分要合理，一个是好让开发人员看到这条BUG后容易地通过追踪用例过程就可以发现是哪出的问题，太复杂的用例会把开发人员搞晕，另一个是过份简单的用例将导致你的用例条数很多，会把自己搞得很累，我想这就是度的问题,也就是这个度让我迟迟不知道该怎么写好用例',
			'e': '10:39:20',
			't': 1,
			'u': 0,
		}, {
			'm': '多混些日子就可以了，这只是接触过与没经历过的差别，没多大技术性，建议你多学开发知识，这对测试非常有用',
			'e': '10:39:34',
			't': 1,
			'u': 1,
		}, {
			'm': '我用BUGFREE2.0可以直接COPY ,修改,写起来倒是方便',
			'e': '10:39:58',
			't': 1,
			'u': 0,
		}, {
			'm': '你要用TD或别的一些，COPY都不用',
			'e': '10:44:37',
			't': 1,
			'u': 1,
		}, {
			'm': '那么就说对增删改的用例也就是可以多个步骤写在一起,就比如我对一个文本框的输入用例,可以简单写成一个用例,分步骤为:1.正常值输入2.边界值输入3.特殊字符输入 4......这样的?',
			'e': '10:45:03',
			't': 1,
			'u': 0,
		}, {
			'm': 'img/b.jpg',
			'e': '10:45:25',
			'p': 1,
			'u': 0,
		}, {
			'm': '就是这样的，你太有才了',
			'e': '10:46:04',
			't': 1,
			'u': 1,
		}, ]
	};

	// Read chats records match itemLenth
	records.chats.splice(itemLenth);

	return records;
}